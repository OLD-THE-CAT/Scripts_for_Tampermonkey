// ==UserScript==
// @name         GAds. –ò–∫–æ–Ω–∫–∞ –ø–æ–∏—Å–∫–∞ + –ø–∞–º—è—Ç—å
// @namespace    http://tampermonkey.net/
// @version      3.1.2
// @description  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ Google Ad Preview –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
// @author       –ò–ü –£–ª—å—è–Ω–æ–≤
// @match        https://ads.google.com/anon/AdPreview*
// @updateURL    https://github.com/OLD-THE-CAT/Scripts_for_Tampermonkey/raw/refs/heads/main/GAds.%20%D0%98%D0%BA%D0%BE%D0%BD%D0%BA%D0%B0%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0,%20%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C.user.js
// @downloadURL  https://github.com/OLD-THE-CAT/Scripts_for_Tampermonkey/raw/refs/heads/main/GAds.%20%D0%98%D0%BA%D0%BE%D0%BD%D0%BA%D0%B0%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0,%20%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C.user.js
// @grant        none
// @icon         https://img.icons8.com/color/48/google-ads.png
// ==/UserScript==

(function() {
    'use strict';

    let isInitialized = false;
    let fontLoaded = false;

    // CSS –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
    function addAntiFlickerCSS() {
        const style = document.createElement('style');
        style.id = 'anti-flicker-css';
        style.textContent = `
            /* –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
            i[class*="material-icon"]:not(.search-icon-fixed),
            i.material-icons:not(.search-icon-fixed),
            span[class*="material-icon"]:not(.search-icon-fixed) {
                opacity: 0 !important;
                transition: opacity 0.3s ease-in-out !important;
            }

            /* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
            .search-icon-fixed {
                opacity: 1 !important;
                font-family: 'Material Icons', sans-serif !important;
                font-weight: normal !important;
                font-style: normal !important;
                font-size: 24px !important;
                line-height: 1 !important;
                text-transform: none !important;
                display: inline-block !important;
                -webkit-font-smoothing: antialiased !important;
                text-rendering: optimizeLegibility !important;
                -moz-osx-font-smoothing: grayscale !important;
                font-feature-settings: 'liga' !important;
            }

            /* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Unicode */
            .search-icon-unicode {
                font-size: 0 !important;
                position: relative !important;
                opacity: 1 !important;
            }

            .search-icon-unicode:before {
                content: "\\e8b6" !important;
                font-family: "Material Icons", sans-serif !important;
                font-size: 24px !important;
                position: absolute !important;
                left: 0 !important;
                top: 0 !important;
                opacity: 1 !important;
            }
        `;
        document.head.appendChild(style);
        console.log('‚úÖ Anti-flicker CSS –¥–æ–±–∞–≤–ª–µ–Ω');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Material Icons
    function loadMaterialIcons() {
        return new Promise((resolve) => {
            const existingLink = document.querySelector('link[href*="material-icons"]');
            if (existingLink) {
                console.log('Material Icons —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                fontLoaded = true;
                resolve(true);
                return;
            }

            const link = document.createElement('link');
            link.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';
            link.rel = 'stylesheet';
            link.crossOrigin = 'anonymous';

            link.onload = () => {
                console.log('‚úÖ Material Icons –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                fontLoaded = true;
                resolve(true);
            };

            link.onerror = () => {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Material Icons');
                fontLoaded = false;
                resolve(false);
            };

            document.head.appendChild(link);
        });
    }

    // –ü–ª–∞–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
    async function fixSearchIconsSmooth() {
        console.log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–≤–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫...');

        const selectors = [
            'i[class*="material-icon"]',
            'i.material-icons',
            'i.material-icons-extended',
            'span[class*="material-icon"]',
            '[class*="icon"] i',
            'button i',
            'form i'
        ];

        let fixedCount = 0;

        for (const selector of selectors) {
            const elements = document.querySelectorAll(`${selector}:not(.search-icon-fixed):not(.search-icon-unicode)`);

            for (const element of elements) {
                const text = element.textContent.trim();

                if (text === 'search' || text === 'Search') {
                    await fixSingleIcon(element);
                    fixedCount++;
                }
            }
        }

        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if (fixedCount === 0) {
            fixedCount += await aggressiveIconSearch();
        }

        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∫–æ–Ω–æ–∫: ${fixedCount}`);
        return fixedCount;
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
    async function fixSingleIcon(element) {
        return new Promise((resolve) => {
            setTimeout(() => {
                if (fontLoaded) {
                    element.classList.add('search-icon-fixed');
                } else {
                    element.classList.add('search-icon-unicode');
                }

                element.setAttribute('data-icon', 'search');
                console.log('üîß –ò–∫–æ–Ω–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞:', element);
                resolve();
            }, 10);
        });
    }

    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º "search"
    async function aggressiveIconSearch() {
        console.log('–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');

        const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            {
                acceptNode: function(node) {
                    return node.nodeValue.trim() === 'search' ?
                        NodeFilter.FILTER_ACCEPT :
                        NodeFilter.FILTER_REJECT;
                }
            }
        );

        let foundCount = 0;
        let node;

        while (node = walker.nextNode()) {
            const element = node.parentElement;

            if (element &&
                !element.classList.contains('search-icon-fixed') &&
                !element.classList.contains('search-icon-unicode')) {

                await fixSingleIcon(element);
                foundCount++;
            }
        }

        console.log(`–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª: ${foundCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return foundCount;
    }

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM —Å –¥–µ–±–∞—É–Ω—Å–æ–º
    function setupDOMObserver() {
        let timeoutId;

        const observer = new MutationObserver((mutations) => {
            let shouldCheck = false;

            for (const mutation of mutations) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    for (const node of mutation.addedNodes) {
                        if (node.nodeType === 1) {
                            const hasIcon = node.querySelector &&
                                (node.querySelector('[class*="material-icon"]') ||
                                 node.textContent.includes('search'));

                            if (hasIcon) {
                                shouldCheck = true;
                                break;
                            }
                        }
                    }
                }
                if (shouldCheck) break;
            }

            if (shouldCheck) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏...');
                    fixSearchIconsSmooth();
                }, 100);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        console.log('üëÅÔ∏è DOM Observer –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        return observer;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —à—Ä–∏—Ñ—Ç–∞
    async function checkFontReadiness() {
        if (!document.fonts || !document.fonts.check) {
            return false;
        }

        try {
            const isMaterialIconsReady = document.fonts.check('24px Material Icons');
            console.log(`–°—Ç–∞—Ç—É—Å Material Icons: ${isMaterialIconsReady ? '‚úÖ –≥–æ—Ç–æ–≤' : '‚è≥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'}`);
            return isMaterialIconsReady;
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ä–∏—Ñ—Ç–∞:', error);
            return false;
        }
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    function runDiagnostics() {
        console.log('=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
        console.log('URL:', window.location.href);
        console.log('–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞:', document.readyState);
        console.log('–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: 3.1 (—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)');

        const materialIcons = document.querySelectorAll('[class*="material-icon"]');
        const searchElements = Array.from(document.querySelectorAll('*'))
            .filter(el => el.textContent.trim() === 'search' && el.children.length === 0);

        console.log(`–ù–∞–π–¥–µ–Ω–æ material-icon —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${materialIcons.length}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º "search": ${searchElements.length}`);
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async function initialize() {
        if (isInitialized) {
            console.log('‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –ø–æ–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...');

        addAntiFlickerCSS();
        runDiagnostics();

        try {
            await loadMaterialIcons();

            if (fontLoaded) {
                let attempts = 0;
                while (attempts < 10) {
                    const isReady = await checkFontReadiness();
                    if (isReady) break;

                    await new Promise(resolve => setTimeout(resolve, 200));
                    attempts++;
                }
            }

            await fixSearchIconsSmooth();
            setupDOMObserver();

            setTimeout(() => fixSearchIconsSmooth(), 2000);
            setTimeout(() => fixSearchIconsSmooth(), 5000);

            setInterval(() => {
                fixSearchIconsSmooth();
            }, 15000);

            isInitialized = true;
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
    function startScript() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            initialize();
        }

        setTimeout(initialize, 500);
    }

    startScript();

})();
