// ==UserScript==
// @name         YBrowser. –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä–∞
// @namespace    http://tampermonkey.net/
// @version      2.7.2
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫
// @author       –ò–ü –£–ª—å—è–Ω–æ–≤ (–°—Ç–∞–Ω–∏—Å–ª–∞–≤)
// @match        https://yandex.kz/*
// @match        https://yandex.ru/*
// @grant        none
// @run-at       document-start
// @all-frames   true
// @updateURL    https://github.com/OLD-THE-CAT/Scripts_for_Tampermonkey/raw/refs/heads/main/YBrowser.%20%D0%97%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B5%20%D0%BF%D0%BE%D0%BF%D0%B0%D0%BF%D0%B0%20%D0%AF%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%20%D0%91%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B0.user.js
// @downloadURL  https://github.com/OLD-THE-CAT/Scripts_for_Tampermonkey/raw/refs/heads/main/YBrowser.%20%D0%97%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D0%B5%20%D0%BF%D0%BE%D0%BF%D0%B0%D0%BF%D0%B0%20%D0%AF%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%20%D0%91%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B0.user.js
// @icon         https://avatars.mds.yandex.net/get-bunker/128809/f91fbccb31d2222458da4bf97fe3588f0252365a/orig
// ==/UserScript==

(function() {
    'use strict';

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    const CONFIG = {
        turboInterval: 10, // –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10–º—Å
        maxTurboChecks: 10, // –ë–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        keywords: ['–±—Ä–∞—É–∑–µ—Ä', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', 'browser', 'install'],
        storageKey: 'yandex_popup_blocked_hashes',
        searchKeywords: ['–ø–æ–∏—Å–∫', 'search']
    };

    let turboCheckCount = 0;
    let searchFocused = false;
    let popupFound = false;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const TURBO_SELECTORS = {
        popupSelectors: [
            '[class*="Distribution-SplashScreenModalContent"]',
            '[class*="simple-popup"]',
            '[class*="Modal"]',
            '[class*="Popup"]',
            '[class*="Dialog"]',
            '.modal',
            '.popup'
        ],
        closeSelectors: [
            '.simple-popup__close',
            'button[aria-label*="–ó–∞–∫—Ä—ã—Ç—å"]',
            'button[class*="close"]',
            'button[class*="Close"]',
            '.close-button',
            '.CloseButton'
        ],
        searchSelectors: [
            'input[class*="search3__input"]',
            'input[name="text"]',
            '#text'
        ]
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
    const storage = {
        getBlockedHashes() {
            try {
                const stored = localStorage.getItem(CONFIG.storageKey);
                return stored ? JSON.parse(stored) : [];
            } catch (e) {
                return [];
            }
        },

        addBlockedHash(hash) {
            try {
                const blocked = this.getBlockedHashes();
                if (!blocked.includes(hash)) {
                    blocked.push(hash);
                    if (blocked.length > 50) blocked.shift();
                    localStorage.setItem(CONFIG.storageKey, JSON.stringify(blocked));
                }
            } catch (e) {}
        },

        isHashBlocked(hash) {
            return this.getBlockedHashes().includes(hash);
        }
    };

    // –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞
    function quickHash(element) {
        const text = element.textContent.trim().substring(0, 50);
        let hash = 0;
        for (let i = 0; i < text.length; i++) {
            hash = ((hash << 5) - hash) + text.charCodeAt(i);
            hash = hash & hash;
        }
        return hash.toString();
    }

    // –¢—É—Ä–±–æ –ø–æ–∏—Å–∫ –ø–æ–ø–∞–ø–æ–≤
    function turboFindPopups() {
        const foundPopups = [];

        // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        for (const selector of TURBO_SELECTORS.popupSelectors) {
            const elements = document.querySelectorAll(selector);
            for (const element of elements) {
                const text = element.textContent.toLowerCase();
                if (CONFIG.keywords.some(keyword => text.includes(keyword))) {
                    const hash = quickHash(element);
                    if (!storage.isHashBlocked(hash)) {
                        foundPopups.push({ element, hash });
                    } else {
                        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø–∞–ø–æ–≤
                        element.style.cssText = 'display:none!important;visibility:hidden!important;opacity:0!important;z-index:-9999!important;';
                    }
                }
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        const textNodes = document.evaluate(
            "//text()[contains(translate(., '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø', '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'), '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å') or contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'install')]",
            document,
            null,
            XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
            null
        );

        for (let i = 0; i < textNodes.snapshotLength; i++) {
            const textNode = textNodes.snapshotItem(i);
            let element = textNode.parentElement;

            while (element && element !== document.body) {
                const className = element.className || '';
                if (className.includes('modal') || className.includes('popup') ||
                    className.includes('dialog') || className.includes('overlay') ||
                    className.includes('Distribution') || className.includes('SplashScreen')) {

                    const hash = quickHash(element);
                    if (!storage.isHashBlocked(hash)) {
                        const alreadyAdded = foundPopups.some(popup => popup.element === element);
                        if (!alreadyAdded) {
                            foundPopups.push({ element, hash });
                        }
                    }
                    break;
                }
                element = element.parentElement;
            }
        }

        return foundPopups;
    }

    // –¢—É—Ä–±–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–æ–≤
    function turboClosePopups() {
        const popups = turboFindPopups();

        for (const { element: popup, hash } of popups) {
            console.log('üöÄ –¢–£–†–ë–û: –ù–∞–π–¥–µ–Ω –ø–æ–ø–∞–ø!');
            popupFound = true;

            // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            let closeButton = null;
            for (const selector of TURBO_SELECTORS.closeSelectors) {
                closeButton = popup.querySelector(selector);
                if (closeButton) break;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏
            if (!closeButton) {
                const buttons = popup.querySelectorAll('button, [role="button"]');
                for (const button of buttons) {
                    const text = button.textContent.toLowerCase().trim();
                    const ariaLabel = (button.getAttribute('aria-label') || '').toLowerCase();

                    if (text.includes('–∑–∞–∫—Ä—ã—Ç—å') || text.includes('close') ||
                        ariaLabel.includes('–∑–∞–∫—Ä—ã—Ç—å') || ariaLabel.includes('close') ||
                        text === '√ó' || text === '‚úï' || text === 'x') {
                        closeButton = button;
                        break;
                    }
                }
            }

            if (closeButton) {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∫–ª–∏–∫ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
                closeButton.click();

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                ['mousedown', 'mouseup', 'click'].forEach(eventType => {
                    const event = new MouseEvent(eventType, { bubbles: true, cancelable: true });
                    closeButton.dispatchEvent(event);
                });
            }

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞
            popup.style.cssText = 'display:none!important;visibility:hidden!important;opacity:0!important;z-index:-9999!important;';

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            storage.addBlockedHash(hash);

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            setTimeout(() => turboFocusSearch(), 50);
        }

        return popups.length > 0;
    }

    // –¢—É—Ä–±–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    function turboFocusSearch() {
        if (searchFocused) return;

        let searchInput = null;
        for (const selector of TURBO_SELECTORS.searchSelectors) {
            searchInput = document.querySelector(selector);
            if (searchInput) break;
        }

        if (!searchInput) {
            const inputs = document.querySelectorAll('input[type="text"], input:not([type])');
            for (const input of inputs) {
                const placeholder = (input.placeholder || '').toLowerCase();
                if (CONFIG.searchKeywords.some(keyword => placeholder.includes(keyword))) {
                    searchInput = input;
                    break;
                }
            }
        }

        if (searchInput) {
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
            searchInput.focus();
            searchInput.click();

            const focusEvent = new FocusEvent('focus', { bubbles: true });
            searchInput.dispatchEvent(focusEvent);

            console.log('üöÄ –¢–£–†–ë–û: –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            searchFocused = true;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç—É—Ä–±–æ —Ñ—É–Ω–∫—Ü–∏—è
    function turboCheck() {
        turboCheckCount++;

        const found = turboClosePopups();

        if (!found && !searchFocused) {
            turboFocusSearch();
        }

        if (turboCheckCount >= CONFIG.maxTurboChecks) {
            console.log('üöÄ –¢–£–†–ë–û: –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç');
            return;
        }

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        setTimeout(turboCheck, CONFIG.turboInterval);
    }

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π MutationObserver
    const turboObserver = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type === 'childList') {
                for (const node of mutation.addedNodes) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        const className = node.className || '';
                        const textContent = node.textContent || '';

                        if ((className.includes('popup') || className.includes('modal') ||
                             className.includes('Distribution') || className.includes('SplashScreen')) ||
                            (textContent.toLowerCase().includes('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å') ||
                             textContent.toLowerCase().includes('–±—Ä–∞—É–∑–µ—Ä'))) {

                            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                            setTimeout(turboClosePopups, 1);
                            break;
                        }
                    }
                }
            }
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–∞
    function initTurbo() {
        console.log('üöÄ –¢–£–†–ë–û –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–±–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
        turboCheck();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
        if (document.body) {
            turboObserver.observe(document.body, { childList: true, subtree: true });
        } else {
            document.addEventListener('DOMContentLoaded', () => {
                turboObserver.observe(document.body, { childList: true, subtree: true });
            });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
        ['DOMContentLoaded', 'load'].forEach(event => {
            document.addEventListener(event, () => {
                setTimeout(turboClosePopups, 1);
                setTimeout(turboFocusSearch, 100);
            });
        });

        // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        document.addEventListener('click', (e) => {
            const searchInput = document.querySelector('input[type="text"]');
            if (searchInput && e.target !== searchInput) {
                searchFocused = false;
            }
        });
    }

    // –ó–∞–ø—É—Å–∫
    initTurbo();
})();
